
    

SELECT 
  month_total_buy,
  project_type,
  month,
  (CASE WHEN project_type = 2 
    THEN 
      SUM(time_base.month_total_sell)
    ELSE 
      SUM(project_schedule_segments.amount)
  END ) month_total_sell
   
      FROM (
        SELECT 
          SUM(cost_rate)  month_total_buy, 
          SUM(revenue_rate) month_total_sell, 
          project_type, 
          resource_employee_id,
          project_id,
          milestone_id,
          calendar_date,
          DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month

        From (
          SELECT * FROM calendar_view
            WHERE (calendar_view.calendar_date BETWEEN '2022-07-01' AND '2023-06-30')
          ) as calendar_view_filtered

          LEFT JOIN revenue_cost_view
          ON ((calendar_view_filtered.calendar_date BETWEEN DATE_FORMAT(resource_start,'%Y-%m-%d') AND DATE_FORMAT(resource_end,'%Y-%m-%d')) AND
            (calendar_view_filtered.calendar_date BETWEEN 
              DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND 
              DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d'))
            )

        WHERE is_holidays = 0 AND is_weekday = 1

        GROUP BY project_type, month, project_id 
      ) as time_base

    LEFT JOIN  project_schedules 
      ON time_base.project_id = project_schedules.project_id 
      LEFT JOIN project_schedule_segments
      ON project_schedule_segments.schedule_id = project_schedules.id
      AND (time_base.calendar_date BETWEEN DATE_FORMAT(project_schedule_segments.start_date,'%Y-%m-%d') AND 
      DATE_FORMAT(project_schedule_segments.end_date,'%Y-%m-%d'))

GROUP BY project_type, month;

  SELECT  
    month_total_buy, 
    time_base.project_type,
    month,
    (CASE WHEN project_type = 2 
      THEN 
          time_base.month_total_sell
      ELSE 
        SUM(project_schedule_segments.amount)
      END ) month_total_sell
    FROM (SELECT 
      SUM(cost_rate)  month_total_buy, 
      SUM(revenue_rate) month_total_sell, 
      project_type, 
      calendar_date,
      DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month

        From (
            SELECT * FROM calendar_view
              WHERE (calendar_view.calendar_date BETWEEN '2022-07-01' AND '2023-06-30')
            ) as calendar_view_filtered

            LEFT JOIN revenue_cost_view
            ON (
              (calendar_view_filtered.calendar_date BETWEEN 
                DATE_FORMAT(resource_start,'%Y-%m-%d') AND 
                DATE_FORMAT(resource_end,'%Y-%m-%d')
              ) AND
              (calendar_view_filtered.calendar_date BETWEEN 
                DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND 
                DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d')
              )
            )

        WHERE is_holidays = 0 AND is_weekday = 1

        GROUP BY project_type, month ) as time_base

    LEFT JOIN opportunities
      ON opportunities.type = project_type
    LEFT JOIN  project_schedules 
      ON project_schedules.project_id = opportunities.id 
      LEFT JOIN project_schedule_segments
      ON project_schedule_segments.schedule_id = project_schedules.id
      AND (time_base.calendar_date BETWEEN DATE_FORMAT(project_schedule_segments.start_date,'%Y-%m-%d') AND 
      DATE_FORMAT(project_schedule_segments.end_date,'%Y-%m-%d'))

GROUP BY project_type, month;


-- FORECAST REVENUE FINAL
  SELECT 
  month_total_buy,
  time_base.project_type,
  month,
  (CASE WHEN project_type = 2 
    THEN 
        time_base.month_total_sell
    ELSE 
      SUM(project_schedule_segments.amount)
    END ) month_total_sell
  FROM (SELECT 
      SUM(cost_rate)  month_total_buy, 
      SUM(revenue_rate) month_total_sell, 
      project_type, 
      calendar_date,
      DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month

        From (
            SELECT * FROM calendar_view
              WHERE (calendar_view.calendar_date BETWEEN '2022-07-01' AND '2023-06-30')
            ) as calendar_view_filtered

            LEFT JOIN revenue_cost_view
            ON (
              (calendar_view_filtered.calendar_date BETWEEN 
                DATE_FORMAT(resource_start,'%Y-%m-%d') AND 
                DATE_FORMAT(resource_end,'%Y-%m-%d')
              ) AND
              (calendar_view_filtered.calendar_date BETWEEN 
                DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND 
                DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d')
              )
            )

        WHERE is_holidays = 0 AND is_weekday = 1

        GROUP BY project_type, month ) as time_base

    LEFT JOIN opportunities
      ON opportunities.type = project_type
    LEFT JOIN  project_schedules 
      ON project_schedules.project_id = opportunities.id 
      LEFT JOIN project_schedule_segments
      ON project_schedule_segments.schedule_id = project_schedules.id
      AND (time_base.calendar_date BETWEEN DATE_FORMAT(project_schedule_segments.start_date,'%Y-%m-%d') AND 
      DATE_FORMAT(project_schedule_segments.end_date,'%Y-%m-%d'))
    WHERE project_schedule_segments.deleted_at IS NULL AND project_schedules.deleted_at IS NULL
GROUP BY project_type, month  

-- SQL CASUAL WILL RUN ON EVERY DAY LOOP
  SELECT 
      SUM(IFNULL(salary * (resource_contract_hours/resource_contract_days_per_week),0)) casual_salaries,
      SUM(IFNULL(salary * (resource_contract_hours / resource_contract_days_per_week),0) * (SELECT
          SUM(global_variable_values.value/100) 
          FROM global_variable_labels
          JOIN global_variable_values ON global_variable_labels.id = global_variable_values.global_variable_id
      WHERE
          global_variable_labels.name = 'Superannuation'
          AND calendar_view_filtered.calendar_date BETWEEN global_variable_values.start_date
          AND global_variable_values.end_date)) casual_superannuation,
      DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month 
      From (
        SELECT * FROM calendar_view
          WHERE (calendar_view.calendar_date BETWEEN '2022-07-01' AND '2023-06-30') 
        ) as calendar_view_filtered

        LEFT JOIN (
              SELECT * FROM revenue_cost_view 
              WHERE employment_type = 1
          ) as casual_employee
        ON ((calendar_view_filtered.calendar_date BETWEEN  
            DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND  
            DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d')
          )
        )
    WHERE is_holidays = 0 AND is_weekday = 1 
GROUP BY month;


-- SQL perminant WILL RUN ON EVERY DAY MONTHLY
  SELECT 
    SUM(salary * (ABS(boh_percent - 100)/100)) permanent_salaries ,-- to seperate boh percent for salaries
    SUM(salary * (ABS(boh_percent - 100)/100) * (SELECT
      SUM(global_variable_values.value/100) 
        FROM global_variable_labels
        JOIN global_variable_values ON global_variable_labels.id = global_variable_values.global_variable_id
      WHERE
        global_variable_labels.name = 'Superannuation'
        AND calendar_view_filtered.calendar_date BETWEEN global_variable_values.start_date
        AND global_variable_values.end_date)) permanent_superannuation,
    DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month -- month wise salary checking contracts end 
      From ( 
        SELECT calendar_date FROM calendar_view
          WHERE (calendar_view.calendar_date BETWEEN '2022-07-01' AND '2023-06-30') -- checking for only one fiscal year 
          GROUP BY calendar_view.month -- group by to get only a date for month
        ) as calendar_view_filtered

        LEFT JOIN (
          SELECT * FROM revenue_cost_view 
          WHERE employment_type != 1
        ) as casual_employee -- group by to get only ONE date for month  to check contracts running dates on every month
        ON ((calendar_view_filtered.calendar_date BETWEEN 
            DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND -- JOIN ONLY ON CONTRACT TO AVOID REPEATED ALLOCATIONs
            DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d')
          )
        )
GROUP BY month;

-- SQL new on test permanent_salaries
  SELECT month, SUM(salary) permanent_salaries, SUM(superannuation) permanent_superannuation
    FROM (SELECT
      SUM((salary / 12) * (ABS(boh_percent - 100) / 100)) salary,
      -- to seperate boh percent for salaries
      SUM((salary / 12) * (ABS(boh_percent - 100) / 100) * (
          SELECT
          SUM(global_variable_values.value / 100)
          FROM
          global_variable_labels
          JOIN global_variable_values ON global_variable_labels.id = global_variable_values.global_variable_id
          WHERE
          global_variable_labels.name = 'Superannuation'
          AND calendar_view_filtered.calendar_date BETWEEN global_variable_values.start_date
          AND global_variable_values.end_date
      )) superannuation,
      DATE_FORMAT( STR_TO_DATE(calendar_view_filtered.calendar_date, '%Y-%m-%d'), '%b %y' ) month -- month wise salary checking contracts end 
      From (SELECT calendar_date
              FROM calendar_view
              WHERE
              (
                  calendar_view.calendar_date BETWEEN '${fiscalYearStart}' --'2022-07-01'
                  AND '${fiscalYearEnd}' --'2022-07-31'
              ) -- checking for only one fiscal year 
          GROUP BY calendar_view.month -- group by to get only a date for month
          ) as calendar_view_filtered
      LEFT JOIN ( SELECT *
          FROM revenue_cost_view
          WHERE employment_type != 1
      ) as casual_employee -- group by to get only ONE date for month  to check contracts running dates on every month
      ON ( (
          calendar_view_filtered.calendar_date BETWEEN DATE_FORMAT(resource_contract_start, '%Y-%m-%d')
          AND -- JOIN ONLY ON CONTRACT TO AVOID REPEATED ALLOCATIONs
          DATE_FORMAT( IFNULL(resource_contract_end, '2049-06-30'), '%Y-%m-%d' ) 
      ))
      GROUP BY
        resource_contract_start,
        resource_contract_end,
        resource_employee_id,
        month
    ) as costing
GROUP BY month;

-- SQL new on test casual_salaries
  SELECT SUM(casual_salaries) casual_salaries, month
        FROM (SELECT
            (salary * (resource_contract_hours/resource_contract_days_per_week)) casual_salaries,
            DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month
        From (
        SELECT * FROM calendar_view          -- 'start of this month' '2024-06-30'
        WHERE (calendar_view.calendar_date BETWEEN '2023-07-01' AND '2024-07-31')  -- remove SUM from subQuery will qive you 4211.68  
        ) as calendar_view_filtered
        LEFT JOIN (
            SELECT * FROM revenue_cost_view
            WHERE employment_type = 1
        ) as casual_employee
        ON ((calendar_view_filtered.calendar_date BETWEEN
            DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND
            DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d')
        ))
        WHERE is_holidays = 0 AND is_weekday = 1
        GROUP BY
            resource_contract_start,
            resource_contract_end,
            resource_employee_id,
            calendar_view_filtered.calendar_date
        ) as costing
GROUP BY month;


-- SQL new on test doh_salaries
  SELECT month, SUM(salary) doh_salaries, SUM(superannuation) doh_superannuation
    FROM
      (SELECT 
        salary/12 * (boh_percent)/100 salary ,-- to seperate boh percent for salaries
        salary/12 * (boh_percent)/100 * (SELECT
          SUM(global_variable_values.value/100) 
            FROM global_variable_labels
            JOIN global_variable_values ON global_variable_labels.id = global_variable_values.global_variable_id
          WHERE
            global_variable_labels.name = 'Superannuation'
            AND calendar_view_filtered.calendar_date BETWEEN global_variable_values.start_date
            AND global_variable_values.end_date
      ) superannuation,
      DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month -- month wise salary checking contracts end 
        From ( 
          SELECT calendar_date FROM calendar_view       --'2022-07-01'              '2022-06-31'
            WHERE (calendar_view.calendar_date BETWEEN  '${fiscalYearStart}' AND '${fiscalYearEnd}') -- checking for only one fiscal year 
            GROUP BY calendar_view.month -- group by to get only a date for month
          ) as calendar_view_filtered

          LEFT JOIN (
            SELECT * FROM revenue_cost_view 
            WHERE employment_type != 1
          ) as casual_employee -- group by to get only ONE date for month  to check contracts running dates on every month
          ON ((calendar_view_filtered.calendar_date BETWEEN 
              DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND -- JOIN ONLY ON CONTRACT TO AVOID REPEATED ALLOCATIONs
              DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d')
            ))
      GROUP BY
        resource_contract_start,
        resource_contract_end,
        resource_employee_id,
        month
      ) as costing
GROUP BY month;

-- SQL casual_actual_salaries
  SELECT 
      SUM(salary * actual_hours) casual_salaries,
      SUM(casual_superannuation * actual_hours) casual_superannuation,
      DATE_FORMAT(entry_date, '%b %y') month
    ROM ( 
      SELECT
          actual_hours,
          STR_TO_DATE(entry_date,'%e-%m-%Y') entry_date,
          revenue_cost_view.resource_employee_id,
          resource_contract_start,
          resource_contract_end,
          salary,
          salary * (SELECT
            SUM(global_variable_values.value/100) 
            FROM global_variable_labels
            JOIN global_variable_values ON global_variable_labels.id = global_variable_values.global_variable_id
          WHERE
            global_variable_labels.name = 'Superannuation'
            AND STR_TO_DATE(profit_view.entry_date,'%e-%m-%Y') BETWEEN global_variable_values.start_date
            AND global_variable_values.end_date) casual_superannuation
      FROM
          revenue_cost_view
          LEFT JOIN profit_view ON (
              revenue_cost_view.resource_employee_id = profit_view.resource_employee_id
          AND STR_TO_DATE(profit_view.entry_date,'%e-%m-%Y') BETWEEN '2022-07-01' AND  '2023-06-30' -- need to remove from here
              AND                                              -- '${fiscalYearStart}' AND  '${acutalMonthEnd}'
              (STR_TO_DATE(profit_view.entry_date,'%e-%m-%Y') BETWEEN  
              DATE_FORMAT(revenue_cost_view.resource_contract_start,'%Y-%m-%d') AND  
              DATE_FORMAT(IFNULL(revenue_cost_view.resource_contract_end, '2049-06-30'),'%Y-%m-%d')
              )
          )
      WHERE
          revenue_cost_view.employment_type = 1
          AND (
              revenue_cost_view.project_status = 'P'
              OR revenue_cost_view.project_status = 'C'
              )

    ) as casual_time_entries
GROUP BY month;

-- SQL INCOME income_tax
    SELECT 
        income_tax.value/100 income_tax_rate,
        DATE_FORMAT( STR_TO_DATE(calendar_view_filtered.calendar_date, '%Y-%m-%d'), '%b %y' ) month
      FROM 
      (SELECT *  
      FROM calendar_view 
      WHERE( calendar_view.calendar_date BETWEEN '2022-07-01' -- '2022-07-01' 
                  AND '2023-06-30'  -- '2023-06-30'  
          ) -- checking for only one fiscal year )
      ) as calendar_view_filtered
      LEFT JOIN (
          SELECT gvv.start_date, gvv.end_date, gvv.value from global_variable_labels gvl
              JOIN global_variable_values gvv on gvv.global_variable_id = gvl.id
          WHERE gvl.name = "income_tax"        
      ) as income_tax
      ON  (
          calendar_view_filtered.calendar_date BETWEEN 
              DATE_FORMAT(income_tax.start_date, '%Y-%m-%d')
                  AND 
              DATE_FORMAT( IFNULL(income_tax.end_date, '2049-06-30'), '%Y-%m-%d' )
      )
GROUP BY month

-- SQL INCOME income_tax 2
  SELECT 
      SUM(salary * actual_hours) casual_salaries,
      SUM(salary * (
          SELECT
              SUM(global_variable_values.value/100) 
              FROM global_variable_labels
              JOIN global_variable_values ON global_variable_labels.id = global_variable_values.global_variable_id
          WHERE
              global_variable_labels.name = 'Superannuation'
              AND timers.entry_date BETWEEN global_variable_values.start_date
              AND global_variable_values.end_date)  * actual_hours) casual_superannuation,
      DATE_FORMAT(entry_date, '%b %y') month
    FROM 
      (SELECT
          resource_employee_id,
          resource_contract_start,
          resource_contract_end,
          salary
      FROM
          revenue_cost_view 
      WHERE
          employment_type = 1
          AND (
              project_status = 'P'
              OR project_status = 'C'
          )
      )as revenue_cost_views
      LEFT JOIN (
          SELECT 
              resource_employee_id,
              actual_hours,
              STR_TO_DATE(entry_date,'%e-%m-%Y') entry_date
          FROM profit_view
          WHERE STR_TO_DATE(entry_date,'%e-%m-%Y') BETWEEN '2022-07-01' AND  '2023-06-30' -- need to remove from here
      ) as timers ON (
          revenue_cost_views.resource_employee_id = timers.resource_employee_id AND
          (timers.entry_date BETWEEN  
              DATE_FORMAT(revenue_cost_views.resource_contract_start,'%Y-%m-%d') AND  
              DATE_FORMAT(IFNULL(revenue_cost_views.resource_contract_end, '2049-06-30'),'%Y-%m-%d')
          )
      )
GROUP BY month;


-- SQL FOR Opportunities Revenue and COST deprecated_ PARTITION
SELECT
  SUM(monthly_project_work_days * per_day_value) AS month_total_sell,
  SUM(monthly_project_work_days * (per_day_value - (per_day_value * cm_percentage/100))) AS month_total_buy,
  month
  FROM(  
    SELECT 
      COUNT(*) AS monthly_project_work_days,
      project_discount_value/SUM(COUNT(*)) OVER(PARTITION BY project_id) AS per_day_value,
      project_id,
      cm_percentage,
      DATE_FORMAT(working_dates, '%b %y') AS month
    FROM(
      SELECT 
        cm_percentage,
        (value * ((get_percentage * go_percentage)/100))/100 AS project_discount_value,
        calendar_date AS working_dates,
        opportunities.id AS project_id

      FROM opportunities
      JOIN calendar_view
        ON (
          calendar_date BETWEEN 
            DATE_FORMAT(start_date,'%Y-%m-%d') AND 
            DATE_FORMAT(end_date,'%Y-%m-%d') -- checking dates in opportunity 
        )
      WHERE NOT EXISTS (
          SELECT 1
          FROM project_shutdown_periods 
          WHERE project_id = opportunities.id
              AND calendar_date BETWEEN start_date AND end_date
      ) -- merged where
          AND ( status ='O' AND deleted_at IS NULL AND type = 2) -- opprtunity where
          AND (is_holidays = 0 AND is_weekday = 1) -- calander_view where
          AND ( end_date >= '${fiscalYearStart}' AND start_date <= '${fiscalYearEnd}') -- date_range whre
    ) AS dayss
    GROUP BY month, project_id
  ) AS extracted_data
GROUP BY month;


-- SQL FORCAST REVENUE WITHOUT LEAVE REQUEST 31-august-2023
SELECT 
  month_total_buy,
  time_base.project_type,
  month,
  (CASE WHEN project_type = 2 
    THEN 
        time_base.month_total_sell
    ELSE 
      SUM(project_schedule_segments.amount)
    END ) month_total_sell
  FROM (SELECT 
    SUM(cost_rate)  month_total_buy, 
    SUM(revenue_rate) month_total_sell, 
    project_type, 
    calendar_date,
    DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month

    From (
        SELECT * FROM calendar_view
            WHERE (calendar_view.calendar_date BETWEEN '${fiscalYearStart}' AND '${fiscalYearEnd}')
            AND is_holidays = 0 AND is_weekday = 1 
        ) as calendar_view_filtered

        LEFT JOIN revenue_cost_view
        ON (
            (calendar_view_filtered.calendar_date BETWEEN 
            DATE_FORMAT(resource_start,'%Y-%m-%d') AND 
            DATE_FORMAT(resource_end,'%Y-%m-%d')
            ) AND
            (calendar_view_filtered.calendar_date BETWEEN 
            DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND 
            DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d')
            )
        )
        
        WHERE NOT EXISTS (
            SELECT start_date, end_date
            FROM project_shutdown_periods
            WHERE CAST(start_date AS DATE) <= calendar_date
                AND (CAST(end_date AS DATE) >= calendar_date OR end_date IS NULL)
                AND project_id = revenue_cost_view.project_id
        ) AND (
          project_status = 'P'
          OR project_status = 'C'
      )
    GROUP BY project_type, month ) as time_base

  LEFT JOIN opportunities
    ON opportunities.type = project_type
  LEFT JOIN  project_schedules 
    ON project_schedules.project_id = opportunities.id 
    LEFT JOIN project_schedule_segments
    ON project_schedule_segments.schedule_id = project_schedules.id
    AND (time_base.calendar_date BETWEEN DATE_FORMAT(project_schedule_segments.start_date,'%Y-%m-%d') AND 
    DATE_FORMAT(project_schedule_segments.end_date,'%Y-%m-%d'))
  WHERE project_schedule_segments.deleted_at IS NULL AND project_schedules.deleted_at IS NULL
GROUP BY project_type, month  

-- SQL CASUAL_FORECASE_SALARIES WITHOUR LEAVE REQUEST 21-August-2023
SELECT
    SUM(casual_salary_per_day) AS casual_salaries,
    SUM(casual_superannuation) AS casual_superannuations,
    month
  From (
    SELECT
      casual_salary_per_day,
      casual_salary_per_day * (
        SELECT
          SUM(global_variable_values.value / 100)
        FROM
          global_variable_labels
          JOIN global_variable_values ON global_variable_labels.id = global_variable_values.global_variable_id
        WHERE
          global_variable_labels.name = 'Superannuation'
          AND this_date BETWEEN global_variable_values.start_date
          AND global_variable_values.end_date
    ) AS casual_superannuation,
      DATE_FORMAT(STR_TO_DATE(this_date, '%Y-%m-%d'), '%b %y') AS month
    From (
      SELECT
        calendar_date this_date
      FROM
        calendar_view -- 'start of this month' '2023-06-30'
      WHERE
        (
          calendar_view.calendar_date BETWEEN '${currentMonthStart}' AND '${fiscalYearEnd}'
          AND is_holidays = 0
          AND is_weekday = 1
        )
    ) as calendar_view_filtered
      LEFT JOIN (
        SELECT
          salary * project_hours_per_day * (resource_project_effort_rate / 100) AS casual_salary_per_day,
          resource_start,
          resource_end,
          resource_contract_start,
          resource_contract_end,
          resource_employee_id
        FROM
          revenue_cost_view
        WHERE
          employment_type = 1
      ) as casual_employee ON (
        this_date BETWEEN DATE_FORMAT(resource_contract_start, '%Y-%m-%d') AND DATE_FORMAT( IFNULL(resource_contract_end, '2049-06-30'), '%Y-%m-%d' )
        AND this_date BETWEEN DATE_FORMAT(resource_start, '%Y-%m-%d') AND DATE_FORMAT(resource_end, '%Y-%m-%d')
      )
  WHERE NOT EXISTS (
    SELECT 1
    FROM project_shutdown_periods 
    WHERE project_id = project_shutdown_periods.project_id
      AND this_date BETWEEN project_shutdown_periods.start_date AND project_shutdown_periods.end_date
  )
  AND NOT EXIST (
    SELECT 1
    FROM leave_requests
    JOIN leave_request_entries
    ON leave_requests.id = leave_request_entries.leave_request_id
    WHERE leave_request.employee_id = resource_employee_id 
      AND this_date = leave_request_entries.date
  )
  GROUP BY
    resource_start,
    resource_end,
    resource_contract_start,
    resource_contract_end,
    resource_employee_id,
    this_date
  ) as costing
GROUP BY month;

-- SQL PERMANENT_SALARIES WITHOUT LEAVE REQUEST 5-sepmtember-2023
SELECT 
    month, 
    SUM(salary_month) permanent_salaries, 
    SUM(superannuation) permanent_superannuation,
    SUM(doh_salary) doh_salaries, 
    SUM(doh_superannuation) doh_superannuation
  FROM (
      SELECT
        -- to seperate boh percent for salaries
          (salary / 12) * (ABS(boh_percent - 100) / 100) salary_month,
          (salary / 12) * (ABS(boh_percent - 100) / 100) * (superannuation_percentage) superannuation,
          
          -- to seperate boh percent for salaries
          (salary / 12) * (boh_percent)/100 doh_salary ,
          (salary / 12) * (boh_percent)/100 * (superannuation_percentage) doh_superannuation, -- to seperate boh percent for salaries
          
          DATE_FORMAT( STR_TO_DATE(calendar_view_filtered.calendar_date, '%Y-%m-%d'), '%b %y' ) month 
          -- month wise salary checking contracts end
      From
      (
          SELECT calendar_date, global_variable_values.value / 100 superannuation_percentage
          FROM
              calendar_view
                  LEFT JOIN global_variable_values ON calendar_view.calendar_date BETWEEN global_variable_values.start_date
                      AND global_variable_values.end_date
                  LEFT JOIN global_variable_labels ON global_variable_labels.id = global_variable_values.global_variable_id
          WHERE
              (                                      -- '2022-07-01'
                  calendar_view.calendar_date BETWEEN '${fiscalYearStart}' AND '${fiscalYearEnd}' -- '2023-06-30'
                  AND global_variable_labels.name = 'Superannuation'
              ) -- checking for only one fiscal year
          GROUP BY calendar_view.month -- group by to get only a date for month
      ) as calendar_view_filtered
          LEFT JOIN (
              SELECT *
              FROM
                  revenue_cost_view
              WHERE
                  employment_type != 1
          ) as casual_employee -- group by to get only ONE date for month  to check contracts running dates on every month
          ON (
              (    -- JOIN ONLY ON CONTRACT TO AVOID REPEATED ALLOCATIONs
                  calendar_view_filtered.calendar_date BETWEEN DATE_FORMAT(resource_contract_start, '%Y-%m-%d')
                  AND 
                  DATE_FORMAT( IFNULL(resource_contract_end, '2049-06-30'), '%Y-%m-%d' )
              )
          )
      GROUP BY
          resource_contract_start,
          resource_contract_end,
          resource_employee_id,
          month
    ) as costing
GROUP BY month;

-- SQL ONLY BUY SELL FOR TIME_BASE Opportunities
SELECT
  SUM(monthly_project_work_days * project_discount_value/total_project_work_days) AS month_total_sell,
  SUM(monthly_project_work_days * (project_discount_value/total_project_work_days - (project_discount_value/total_project_work_days * cm_percentage/100))) AS month_total_buy,
  month

  FROM    
  (SELECT 
    COUNT(*) AS monthly_project_work_days,
    project_id,
    cm_percentage,
    project_discount_value,
    DATE_FORMAT(working_dates, '%b %y') AS month

  FROM(
    SELECT 
      cm_percentage,
      (value * ((get_percentage * go_percentage)/100))/100 AS project_discount_value,
      calendar_date AS working_dates,
      opportunities.id AS project_id

    FROM opportunities
    JOIN calendar_view
      ON (
      calendar_date BETWEEN 
          DATE_FORMAT(start_date,'%Y-%m-%d') AND 
          DATE_FORMAT(end_date,'%Y-%m-%d') -- checking dates in opportunity 
      )
    WHERE NOT EXISTS (
        SELECT 1
        FROM project_shutdown_periods 
        WHERE project_id = opportunities.id
            AND calendar_date BETWEEN start_date AND end_date
    ) -- merged where
        AND ( status ='O' AND deleted_at IS NULL AND type = 2) -- opprtunity where
        AND (is_holidays = 0 AND is_weekday = 1) -- calander_view where
        AND ( end_date >= '2023-07-01' AND start_date <= '2024-06-30')  -- date_range whre
    ) AS dayss
  GROUP BY month, project_id
  ) AS extracted_data
  LEFT JOIN (
    SELECT
      project_id,
      COUNT(*) AS total_project_work_days

    FROM (
      SELECT
        calendar_date AS working_dates,
        opportunities.id AS project_id
        
      FROM
        opportunities
        JOIN calendar_view ON (
          calendar_date BETWEEN DATE_FORMAT(start_date, '%Y-%m-%d')
          AND DATE_FORMAT(end_date, '%Y-%m-%d') -- checking dates in opportunity 
        )
      WHERE
        NOT EXISTS (
            SELECT
                1
            FROM
                project_shutdown_periods
            WHERE
                project_id = opportunities.id
                AND calendar_date BETWEEN start_date AND end_date
        ) -- merged where
        AND ( status = 'O' AND deleted_at IS NULL AND type = 2 ) -- opprtunity where
        AND ( is_holidays = 0 AND is_weekday = 1 ) -- calander_view where
        AND ( end_date >= '${fiscalYearStart}' AND start_date <= '${fiscalYearEnd}')
    ) AS dayss_total
    GROUP BY project_id
  ) AS total_sum ON total_sum.project_id = extracted_data.project_id
GROUP BY month;

-- SQL FOR INOVOCE DATA WITH PROJECT DATA for invoice_data 
SELECT
  CONCAT(DATE_FORMAT(project_schedules.start_date, '%b'), '-', DATE_FORMAT(project_schedules.end_date, '%b')) AS description,
  project_schedules.amount AS unitAmount,
  project_schedules.id AS id,
  '-' AS quantity, -- need to multiply this
  1 AS hours, -- but show this in table
  files.type AS type,
  files.original_name AS name,
  files.unique_name AS uniqueName,
  files.id AS fileId
  FROM
    opportunities
        LEFT JOIN project_schedules ON
        opportunities.id = project_schedules.project_id
        LEFT JOIN milestones ON
        milestones.project_id = opportunities.id
        LEFT JOIN files
        ON  milestones.file_id = files.id
  WHERE opportunities.id=8
AND project_schedules.deleted_at IS NULL;