// import { Entity, Column, ManyToOne } from 'typeorm'; 
// import { Base } from './common/base';
// import { ContactPerson } from './contactPerson';
// import { StandardSkillStandardLevel } from './standardSkillStandardLevel';

// @Entity("contact_person_standard_skill_standard_levels") 
// export class ContactPersonStandardSkillStandardLevel extends Base { 

//    @ManyToOne(() => ContactPerson)
//    @Column({ name: "contact_person_id" })
//    contactPerson: ContactPerson;

//    @ManyToOne(() => StandardSkillStandardLevel)
//    @Column({ name: "standard_skill_standard_level_id" })
//    standardSkillStandardLevel: StandardSkillStandardLevel;

// }




DELIMITER //
CREATE  PROCEDURE dorepeat(startdate DATE, enddate DATE)
  BEGIN
    SET @x = STR_TO_DATE(startdate,'%e-%m-%Y');
    REPEAT 
      SET @x = ADDDATE(@x, INTERVAL 1 MONTH); 
      SELECT @x month, SUM(resource_selling_rate* actual_hours) FROM profit_view 
      GROUP BY month;
    UNTIL @x >= STR_TO_DATE(enddate,'%e-%m-%Y') 
    END REPEAT;
  END
//
DELIMITER ;


CREATE  PROCEDURE dorepeat()
  BEGIN
  SELECT SUM(resource_selling_rate* actual_hours) FROM profit_view ;
  END;





  DELIMITER //
  CREATE PROCEDURE dorepeat(startDate DATE, endDate DATE)
    BEGIN
        SET @x = STR_TO_DATE(startDate,'%Y-%m-%d');
      SET @y = STR_TO_DATE(endDate,'%Y-%m-%d');
      REPEAT 
          SELECT 
              project_type,
              project_amount,
              (CASE WHEN project_type = 2 
                THEN 
                  SUM( resource_buying_rate * actual_hours ) 
                ELSE 
                  0 
                END )
              month_total_buy, 
  
              (CASE WHEN project_type = 2 
                THEN 
                    SUM( resource_selling_rate * actual_hours ) 
                ELSE 
                  project_schedule_segments.amount 
                END )
              month_total_sell, 
  
              SUM(actual_hours) actual_hours, 
              #(CASE WHEN project_type = 2 
                #THEN 
                  #DATE_FORMAT(STR_TO_DATE(entry_date,'%e-%m-%Y'), '%b %y') 
                #ELSE 
                  #DATE_FORMAT(project_schedule_segments.start_date, '%b %y') 
                #END) 
                DATE_FORMAT( @x, '%b %y') month
  
              FROM profit_view
                LEFT JOIN project_schedules ON
                  profit_view.project_id = project_schedules.project_id
                    LEFT JOIN project_schedule_segments  ON 
                      project_schedules.id = project_schedule_segments.schedule_id 
  
              WHERE ( project_status = 'P' OR project_status = 'C' ) 
              AND project_start <= STR_TO_DATE('01-07-2022' ,'%Y-%m-%d') 
              AND project_end >= STR_TO_DATE('30-06-2023' ,'%Y-%m-%d') 
              AND project_schedules.deleted_at IS NULL 
              AND project_schedule_segments.deleted_at IS NULL 
              GROUP BY project_type, month;
              SET @x =DATE_ADD(@x, INTERVAL 1 MONTH);
              UNTIL @x <= @y
            END REPEAT;
    END
    //






    CREATE PROCEDURE dorepeat(startDate DATE, endDate DATE)
  BEGIN
  	SET @x = 0;
    SET @y = STR_TO_DATE(endDate,'%Y-%m-%d');
    REPEAT 
        SELECT 
            project_type,
            project_amount,
            (CASE WHEN project_type = 2 
              THEN 
                SUM( resource_buying_rate * actual_hours ) 
              ELSE 
                0 
              END )
            month_total_buy, 

            (CASE WHEN project_type = 2 
              THEN 
                  SUM( resource_selling_rate * actual_hours ) 
              ELSE 
                project_schedule_segments.amount 
              END )
            month_total_sell, 

            SUM(actual_hours) actual_hours, 
            (CASE WHEN project_type = 2 
              THEN 
                DATE_FORMAT(STR_TO_DATE(entry_date,'%e-%m-%Y'), '%b %y') 
              ELSE 
                DATE_FORMAT(project_schedule_segments.start_date, '%b %y') 
              END) 
              #DATE_FORMAT( @x, '%b %y') month

            FROM profit_view
              LEFT JOIN project_schedules ON
                profit_view.project_id = project_schedules.project_id
                  LEFT JOIN project_schedule_segments  ON 
                    project_schedules.id = project_schedule_segments.schedule_id 

            WHERE ( project_status = 'P' OR project_status = 'C' ) 
            AND project_start <= STR_TO_DATE('01-07-2022' ,'%Y-%m-%d') 
            AND project_end >= STR_TO_DATE('30-06-2023' ,'%Y-%m-%d') 
            AND project_schedules.deleted_at IS NULL 
            AND project_schedule_segments.deleted_at IS NULL 
            GROUP BY project_type, month;
            SET @x = @x+1;
            UNTIL @x <= @y
          END REPEAT;
  END;;



  `Select o_r.start_date res_startDate, o_r.end_date res_endDate, ec.start_date con_startDate, ec.end_date con_endDate, 
      (ora.buying_rate *( (ec.no_of_hours /5) * (ora.effort_rate /100) ) ) forecastBuyRateDaily, 
      (ora.selling_rate *( (ec.no_of_hours /5) * (ora.effort_rate /100) ) ) forecastSellRateDaily
      FROM opportunities o 
        JOIN opportunity_resources o_r ON 
          o_r.opportunity_id = o.id 
                JOIN opportunity_resource_allocations ora ON 
                    ora.opportunity_resource_id = o_r.id 
                    JOIN contact_person_organizations cpo ON 
                        cpo.contact_person_id = ora.contact_person_id 
                        JOIN employees e ON 
                        e.contact_person_organization_id = cpo.id
                        JOIN employment_contracts ec ON
                          ec.employee_id = e.id
      WHERE o.id = ${projectId} AND ora.is_marked_as_selected = 1 AND ec.start_date <= STR_TO_DATE('${fiscalYear.end}' ,'%e-%m-%Y') 
      AND (ec.end_date IS NULL ||  ec.end_date >= STR_TO_DATE('${fiscalYear.actual}' ,'%e-%m-%Y')) 
      AND o_r.start_date <= STR_TO_DATE('${fiscalYear.end}' ,'%e-%m-%Y') AND ec.deleted_at IS NULL AND ora.deleted_at IS NULL`



    DELIMITER //
CREATE PROCEDURE dorepeat(startDate DATE, endDate DATE)
  BEGIN
    DECLARE SS DATE DEFAULT STR_TO_DATE(startDate,'%Y-%m-%d');
    DECLARE S DATE DEFAULT STR_TO_DATE(startDate,'%Y-%m-%d');
    DECLARE E DATE DEFAULT STR_TO_DATE(endDate,'%Y-%m-%d');
    -- SET S = STR_TO_DATE(startDate,'%Y-%m-%d');
    -- SET E = STR_TO_DATE(endDate,'%Y-%m-%d');
    
      SELECT 
      
          SUM(forcaste_buy_rate) forcaste_buy_rates,
          SUM(forcaste_sell_rate) forcaste_sell_rates,
        (SELECT  WHILE (S <= E) DO
          ((5 * (DATEDIFF(E, S) DIV 7) + 
          MID('0123444401233334012222340111123400001234000123440', 
            7 * WEEKDAY(S) + 
            WEEKDAY(E) + 1, 
            1)+1) - 
          (SELECT COUNT(*) FROM calendar_holidays 
            WHERE (WEEKDAY(calendar_holidays.date) < 5)
            AND (calendar_holidays.date BETWEEN  S  AND E)
          )) working_days,
          DATE_FORMAT(S, '%b %y') month;
          SET S = DATE_ADD(S, INTERVAL 1 MONTH);
        END WHILE;
        ) as holidays

      FROM forecaste_view
      WHERE ( project_status = 'P' OR project_status = 'C' )
            AND resource_contract_start <= SS
            AND (resource_contract_end IS NULL OR  resource_contract_end >= CURRENT_DATE())
            AND (resource_start BETWEEN  SS AND E);
  END
//
DELIMITER ;


DELIMITER //

CREATE PROCEDURE loop_date(startDate DATE, endDate DATE)
BEGIN
    DECLARE dateStart DATETIME DEFAULT startDate;
    DECLARE dateEnd DATETIME DEFAULT endDate;
    
    WHILE (dateStart < '2020-01-01 00:00:00') DO
        INSERT INTO my_table(time_key) VALUES (dateStart);
        SET dateStart = dateStart + INTERVAL 3 HOUR;
    END WHILE;
END //

DELIMITER ;



SELECT COUNT(*) holidays,
 (5 * (DATEDIFF('2022-10-31', '2022-10-01') DIV 7) + 
    MID('0123444401233334012222340111123400001234000123440', 
      7 * WEEKDAY('2022-10-01') + 
      WEEKDAY('2022-10-31') + 1, 
      1)+1) number_of_days
FROM calendar_holidays  
      WHERE (calendar_holidays.date BETWEEN  STR_TO_DATE('2022-10-01' ,'%Y-%m-%d')  AND STR_TO_DATE('2022-10-31' ,'%Y-%m-%d'))
      AND (WEEKDAY(calendar_holidays.date) < 5);

    SELECT actual.* , forecaste.* 
      FROM (SELECT 
        profit_view.project_id,
        project_type,
        (CASE WHEN project_type = 2 
          THEN 
              SUM( resource_selling_rate * actual_hours ) 
          ELSE 
            project_schedule_segments.amount 
          END )
        month_total_sell, 
        
        (CASE WHEN project_type = 2 
          THEN 
            DATE_FORMAT(STR_TO_DATE(entry_date,'%e-%m-%Y'), '%b %y') 
          ELSE 
            DATE_FORMAT(project_schedule_segments.start_date, '%b %y') 
          END) 
        month
      
        FROM profit_view
          LEFT JOIN project_schedules ON
            profit_view.project_id = project_schedules.project_id
              LEFT JOIN project_schedule_segments  ON 
                project_schedules.id = project_schedule_segments.schedule_id 
                
        WHERE ( project_status = 'P' OR project_status = 'C' ) 
        
        AND project_start <= STR_TO_DATE('2023-30-06' ,'%Y-%m-%d') 
        AND project_end >= STR_TO_DATE('2022-07-01' ,'%Y-%m-%d') 
        AND project_schedules.deleted_at IS NULL 
        AND project_schedule_segments.deleted_at IS NULL 

        GROUP BY project_id, month) as actual

        LEFT JOIN 
        (
          SELECT 
          project_type,
          resource_start,
          resource_end,
          resource_contract_start,
          resource_contract_end,
          SUM(forcaste_buy_rate) forcaste_buy_rates,
          SUM(forcaste_sell_rate) forcaste_sell_rates

      FROM forecaste_view
      WHERE ( project_status = 'P' OR project_status = 'C' )
            AND resource_contract_start <= STR_TO_DATE('2023-30-06' ,'%Y-%m-%d') 
            AND (resource_contract_end IS NULL OR  resource_contract_end >= CURRENT_DATE())
            AND (resource_start BETWEEN  STR_TO_DATE('2023-30-06' ,'%Y-%m-%d')  AND STR_TO_DATE('2023-30-06' ,'%Y-%m-%d')  )
        ) as forecaste

      ON forecaste.project_type = actual.project_type;


      


SELECT 
  month_total_buy,
  project_type,
  month,
  (CASE WHEN project_type = 2 
    THEN 
      SUM(time_base.month_total_sell)
    ELSE 
      SUM(project_schedule_segments.amount)
  END ) month_total_sell
   
      FROM (
        SELECT 
          SUM(cost_rate)  month_total_buy, 
          SUM(revenue_rate) month_total_sell, 
          project_type, 
          resource_employee_id,
          project_id,
          milestone_id,
          calendar_date,
          DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month

        From (
          SELECT * FROM calendar_view
            WHERE (calendar_view.calendar_date BETWEEN '2022-07-01' AND '2023-06-30')
          ) as calendar_view_filtered

          LEFT JOIN revenue_cost_view
          ON ((calendar_view_filtered.calendar_date BETWEEN DATE_FORMAT(resource_start,'%Y-%m-%d') AND DATE_FORMAT(resource_end,'%Y-%m-%d')) AND
            (calendar_view_filtered.calendar_date BETWEEN 
              DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND 
              DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d'))
            )

        WHERE is_holidays = 0 AND is_weekday = 1

        GROUP BY project_type, month, project_id 
      ) as time_base

    LEFT JOIN  project_schedules 
      ON time_base.project_id = project_schedules.project_id 
      LEFT JOIN project_schedule_segments
      ON project_schedule_segments.schedule_id = project_schedules.id
      AND (time_base.calendar_date BETWEEN DATE_FORMAT(project_schedule_segments.start_date,'%Y-%m-%d') AND 
      DATE_FORMAT(project_schedule_segments.end_date,'%Y-%m-%d'))

    GROUP BY project_type, month;



    

SELECT 
  month_total_buy,
  time_base.project_type,
  month,
  (CASE WHEN project_type = 2 
    THEN 
        time_base.month_total_sell
    ELSE 
      SUM(project_schedule_segments.amount)
    END ) month_total_sell
  FROM (SELECT 
      SUM(cost_rate)  month_total_buy, 
      SUM(revenue_rate) month_total_sell, 
      project_type, 
      calendar_date,
      DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month

        From (
            SELECT * FROM calendar_view
              WHERE (calendar_view.calendar_date BETWEEN '2022-07-01' AND '2023-06-30')
            ) as calendar_view_filtered

            LEFT JOIN revenue_cost_view
            ON (
              (calendar_view_filtered.calendar_date BETWEEN 
                DATE_FORMAT(resource_start,'%Y-%m-%d') AND 
                DATE_FORMAT(resource_end,'%Y-%m-%d')
              ) AND
              (calendar_view_filtered.calendar_date BETWEEN 
                DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND 
                DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d')
              )
            )

        WHERE is_holidays = 0 AND is_weekday = 1

        GROUP BY project_type, month ) as time_base

    LEFT JOIN opportunities
      ON opportunities.type = project_type
    LEFT JOIN  project_schedules 
      ON project_schedules.project_id = opportunities.id 
      LEFT JOIN project_schedule_segments
      ON project_schedule_segments.schedule_id = project_schedules.id
      AND (time_base.calendar_date BETWEEN DATE_FORMAT(project_schedule_segments.start_date,'%Y-%m-%d') AND 
      DATE_FORMAT(project_schedule_segments.end_date,'%Y-%m-%d'))

    GROUP BY project_type, month;


//FORECAST REVENUE FINAL
  SELECT 
  month_total_buy,
  time_base.project_type,
  month,
  (CASE WHEN project_type = 2 
    THEN 
        time_base.month_total_sell
    ELSE 
      SUM(project_schedule_segments.amount)
    END ) month_total_sell
  FROM (SELECT 
      SUM(cost_rate)  month_total_buy, 
      SUM(revenue_rate) month_total_sell, 
      project_type, 
      calendar_date,
      DATE_FORMAT(STR_TO_DATE(calendar_view_filtered.calendar_date,'%Y-%m-%d'), '%b %y') month

        From (
            SELECT * FROM calendar_view
              WHERE (calendar_view.calendar_date BETWEEN '2022-07-01' AND '2023-06-30')
            ) as calendar_view_filtered

            LEFT JOIN revenue_cost_view
            ON (
              (calendar_view_filtered.calendar_date BETWEEN 
                DATE_FORMAT(resource_start,'%Y-%m-%d') AND 
                DATE_FORMAT(resource_end,'%Y-%m-%d')
              ) AND
              (calendar_view_filtered.calendar_date BETWEEN 
                DATE_FORMAT(resource_contract_start,'%Y-%m-%d') AND 
                DATE_FORMAT(IFNULL(resource_contract_end, '2049-06-30'),'%Y-%m-%d')
              )
            )

        WHERE is_holidays = 0 AND is_weekday = 1

        GROUP BY project_type, month ) as time_base

    LEFT JOIN opportunities
      ON opportunities.type = project_type
    LEFT JOIN  project_schedules 
      ON project_schedules.project_id = opportunities.id 
      LEFT JOIN project_schedule_segments
      ON project_schedule_segments.schedule_id = project_schedules.id
      AND (time_base.calendar_date BETWEEN DATE_FORMAT(project_schedule_segments.start_date,'%Y-%m-%d') AND 
      DATE_FORMAT(project_schedule_segments.end_date,'%Y-%m-%d'))
    WHERE project_schedule_segments.deleted_at IS NULL AND project_schedules.deleted_at IS NULL
  GROUP BY project_type, month  